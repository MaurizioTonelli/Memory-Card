{"version":3,"sources":["components/WordCard.js","components/Lives.js","components/Game.js","components/Button.js","components/MemoryCardGame.js","App.js","reportWebVitals.js","index.js"],"names":["Card","styled","button","WordCard","onClick","props","playRound","word","this","Component","Heart","i","Lives","Heart1","lives","Heart2","Heart3","Score","h2","CardWrapper","div","GameWrapper","Game","useState","words","setWords","usedWords","setUsedWords","setLives","score","setScore","useEffect","a","fetch","response","json","wordsJson","selectCards","data","fetchWords","endGame","length","arr","n","sort","Math","random","slice","includes","concat","addUsedWord","selectedWords","selectedCards","push","unusedWords","filter","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","selectRoundWords","SButton","Button","children","GameIntro","h3","GameMessage","MemoryCardGame","highScore","setHighScore","message","setMessage","enterNewScore","isGamePlaying","gameMessage","startGame","AppWrapper","Nav","animated","nav","Title","h1","Credit","App","setIsGamePlaying","useSpring","height","from","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIMA,EAAOC,IAAOC,OAAV,6bA8BKC,E,4JATb,WAAU,IAAD,OACP,OACE,cAACH,EAAD,CAAMI,QAAS,kBAAM,EAAKC,MAAMC,UAAU,EAAKD,MAAME,OAArD,SACGC,KAAKH,MAAME,W,GAJGE,a,QCpBjBC,EAAQT,IAAOU,EAAV,oEAgCIC,E,4JA1Bb,WACE,IAAMC,EAASZ,YAAOS,EAAPT,CAAH,kDACDO,KAAKH,MAAMS,OAAS,EAAI,MAAQ,QAErCC,EAASd,YAAOS,EAAPT,CAAH,kDACDO,KAAKH,MAAMS,OAAS,EAAI,MAAQ,QAErCE,EAASf,YAAOS,EAAPT,CAAH,kDACDO,KAAKH,MAAMS,OAAS,EAAI,MAAQ,QAE3C,OACE,gCACE,cAACD,EAAD,UACE,cAAC,IAAD,MAEF,cAACE,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAD,UACE,cAAC,IAAD,a,GApBUP,aCJdQ,EAAQhB,IAAOiB,GAAV,uEAGLC,EAAclB,IAAOmB,IAAV,2NAUXC,EAAcpB,IAAOmB,IAAV,6IAgGFE,I,gBAAAA,EAzFF,SAACjB,GAAW,IAAD,EACIkB,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEYF,mBAAS,IAFrB,mBAEfG,EAFe,KAEJC,EAFI,OAGIJ,mBAAS,GAHb,mBAGfT,EAHe,KAGRc,EAHQ,OAIIL,mBAAS,GAJb,mBAIfM,EAJe,KAIRC,EAJQ,KAMtBC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,mBAD/B,cACQC,EADR,gBAE0BA,EAASC,OAFnC,OAEQC,EAFR,OAGEX,EAASY,EAAYD,EAAUE,KAAM,MAHvC,4CADc,uBAAC,WAAD,wBAMdC,KACC,IAEHR,qBAAU,WACM,IAAVjB,GACFT,EAAMmC,QAAQX,EAAO,YAEE,MAArBH,EAAUe,QACZpC,EAAMmC,QAAQX,EAAO,0CAEtB,CAACH,EAAWZ,EAAOe,EAAOxB,IAE7B,IAAMgC,EAAc,SAACK,EAAKC,GAIxB,OAHYD,EACSE,MAAK,iBAAM,GAAMC,KAAKC,YACnBC,MAAM,EAAGJ,IAQ7BrC,EAAY,SAACC,GACbmB,EAAUsB,SAASzC,GACrBqB,EAASd,EAAQ,KAND,SAACP,GACnBoB,EAAaD,EAAUuB,OAAO1C,IAQ9B2C,CAAY3C,GACZuB,EAASD,EAAQ,KAcnB,GAAqB,IAAjBL,EAAMiB,OACR,OAAO,0CAEP,IAAIU,EAfmB,WACvB,IAAIC,EAAgB,GAChB1B,EAAUe,QAAU,EACtBW,EAAcC,KAAd,MAAAD,EAAa,YAASf,EAAYX,EAAWA,EAAUe,UAEvDW,EAAcC,KAAd,MAAAD,EAAa,YAASf,EAAYX,EAAW,KAE/C,IAAI4B,EAAc9B,EAAM+B,QAAO,SAAChD,GAAD,OAAWmB,EAAUsB,SAASzC,MAE7D,OADA6C,EAAcC,KAAd,MAAAD,EAAa,YAASf,EAAYiB,EAAa,EAAIF,EAAcX,UAsBrE,SAAiBe,GAKf,IAJA,IACEC,EACAC,EAFEC,EAAeH,EAAMf,OAIlB,IAAMkB,GACXD,EAAcb,KAAKe,MAAMf,KAAKC,SAAWa,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAlCEK,CAAQT,GAMKU,GACpB,OACE,eAACzC,EAAD,WACE,eAACJ,EAAD,qBAAeY,KACf,cAAC,EAAD,CAAOf,MAAOA,IACd,eAACK,EAAD,WACE,cAAC,EAAD,CAAUZ,KAAM4C,EAAc,GAAI7C,UAAWA,IAC7C,cAAC,EAAD,CAAUC,KAAM4C,EAAc,GAAI7C,UAAWA,IAC7C,cAAC,EAAD,CAAUC,KAAM4C,EAAc,GAAI7C,UAAWA,WCvFjDyD,EAAU9D,IAAOC,OAAV,wUAoBE8D,EAJA,SAAC3D,GACd,OAAO,cAAC0D,EAAD,CAAS3D,QAASC,EAAMD,QAAxB,SAAkCC,EAAM4D,YChB3CC,EAAYjE,IAAOmB,IAAV,8IAOTH,EAAQhB,IAAOkE,GAAV,0FAILC,EAAcnE,IAAOiB,GAAV,2GAsCFmD,EAjCQ,SAAChE,GAAW,IAAD,EACEkB,mBAAS,GADX,mBACzB+C,EADyB,KACdC,EADc,OAEFhD,mBAAS,IAFP,mBAEzBiD,EAFyB,KAEhBC,EAFgB,KAW1BC,EAAgB,SAAC7C,GACjBA,EAAQyC,GACVC,EAAa1C,IAGjB,OAAKxB,EAAMsE,cAUP,cAACT,EAAD,UACE,cAAC,EAAD,CAAM1B,QArBI,SAACX,EAAO+C,GACtBvE,EAAMmC,UACNkC,EAAc7C,GACd4C,EAAWG,QAST,eAACV,EAAD,WACE,cAACE,EAAD,UAAcI,IACd,cAAC,EAAD,CAAQpE,QAASC,EAAMwE,UAAvB,sBACA,eAAC,EAAD,0BAAoBP,S,QCnCtBQ,EAAa7E,IAAOmB,IAAV,iIAQV2D,EAAM9E,YAAO+E,IAASC,IAAhBhF,CAAH,qOAUHiF,EAAQjF,IAAOkF,GAAV,qLAQLC,GAASnF,IAAOkE,GAAV,uLAoCGkB,OA3Bf,WAAgB,IAAD,EAC6B9D,oBAAS,GADtC,mBACNoD,EADM,KACSW,EADT,KAQPjF,EAAQkF,YAAU,CACtBC,OAASb,EAAyB,OAAT,OACzBc,KAAM,CAAED,OAASb,EAAyB,OAAT,UAEnC,OACE,eAACG,EAAD,WACE,eAACC,EAAD,CAAKW,MAAOrF,EAAZ,UACE,cAAC6E,EAAD,+BACA,cAACE,GAAD,qCAEF,cAAC,EAAD,CACET,cAAeA,EACfE,UAlBY,WAChBS,GAAiB,IAkBb9C,QAhBU,WACd8C,GAAiB,UCpCNK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.993c37e3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport \"../assets/fonts.css\";\n\nconst Card = styled.button`\n  width: 15%;\n  font-family: \"Noto Sans JP\", sans-serif;\n  padding: 20px 10px;\n  border: 1px solid #aaa;\n  border-radius: 10px;\n  margin: 10px;\n  font-size: 1.2em;\n  background-color: white;\n  box-shadow: 10px 8px #666;\n  &:hover {\n    cursor: pointer;\n    background-color: #ccc;\n    transform: translateY(-5px) translateX(5px);\n  }\n  @media only screen and (max-width: 768px) {\n    width: 50%;\n  }\n`;\n\nclass WordCard extends Component {\n  render() {\n    return (\n      <Card onClick={() => this.props.playRound(this.props.word)}>\n        {this.props.word}\n      </Card>\n    );\n  }\n}\n\nexport default WordCard;\n","import React, { Component } from \"react\";\nimport { AiFillHeart } from \"react-icons/ai\";\nimport styled from \"styled-components\";\n\nconst Heart = styled.i`\n  font-size: 2em;\n  margin: 20px 5px;\n`;\n\nclass Lives extends Component {\n  render() {\n    const Heart1 = styled(Heart)`\n      color: ${this.props.lives >= 1 ? \"red\" : \"#ccc\"};\n    `;\n    const Heart2 = styled(Heart)`\n      color: ${this.props.lives >= 2 ? \"red\" : \"#ccc\"};\n    `;\n    const Heart3 = styled(Heart)`\n      color: ${this.props.lives >= 3 ? \"red\" : \"#ccc\"};\n    `;\n    return (\n      <div>\n        <Heart1>\n          <AiFillHeart />\n        </Heart1>\n        <Heart2>\n          <AiFillHeart />\n        </Heart2>\n        <Heart3>\n          <AiFillHeart />\n        </Heart3>\n      </div>\n    );\n  }\n}\n\nexport default Lives;\n","import React, { useState, useEffect } from \"react\";\nimport WordCard from \"./WordCard\";\nimport Lives from \"./Lives\";\nimport styled from \"styled-components\";\nimport \"../assets/fonts.css\";\nconst Score = styled.h2`\n  font-family: \"DotGothic16\", sans-serif;\n`;\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\nconst GameWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst Game = (props) => {\n  const [words, setWords] = useState([]);\n  const [usedWords, setUsedWords] = useState([]);\n  const [lives, setLives] = useState(3);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    async function fetchWords() {\n      const response = await fetch(\"data/words.json\");\n      const wordsJson = await response.json();\n      setWords(selectCards(wordsJson.data, 100));\n    }\n    fetchWords();\n  }, []);\n\n  useEffect(() => {\n    if (lives === 0) {\n      props.endGame(score, \"You lost\");\n    }\n    if (usedWords.length === 100) {\n      props.endGame(score, \"You won, you finished all 100 words!\");\n    }\n  }, [usedWords, lives, score, props]);\n\n  const selectCards = (arr, n) => {\n    var array = arr;\n    var shuffled = array.sort(() => 0.5 - Math.random());\n    let selected = shuffled.slice(0, n);\n    return selected;\n  };\n\n  const addUsedWord = (word) => {\n    setUsedWords(usedWords.concat(word));\n  };\n\n  const playRound = (word) => {\n    if (usedWords.includes(word)) {\n      setLives(lives - 1);\n      return;\n    }\n    addUsedWord(word);\n    setScore(score + 1);\n  };\n  const selectRoundWords = () => {\n    let selectedCards = [];\n    if (usedWords.length <= 2) {\n      selectedCards.push(...selectCards(usedWords, usedWords.length));\n    } else {\n      selectedCards.push(...selectCards(usedWords, 2));\n    }\n    let unusedWords = words.filter((word) => !usedWords.includes(word));\n    selectedCards.push(...selectCards(unusedWords, 3 - selectedCards.length));\n    return shuffle(selectedCards);\n  };\n\n  if (words.length === 0) {\n    return <div>loading</div>;\n  } else {\n    let selectedWords = selectRoundWords();\n    return (\n      <GameWrapper>\n        <Score>Score: {score}</Score>\n        <Lives lives={lives} />\n        <CardWrapper>\n          <WordCard word={selectedWords[0]} playRound={playRound} />\n          <WordCard word={selectedWords[1]} playRound={playRound} />\n          <WordCard word={selectedWords[2]} playRound={playRound} />\n        </CardWrapper>\n      </GameWrapper>\n    );\n  }\n};\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport default Game;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"../assets/fonts.css\";\n\nconst SButton = styled.button`\n  background-color: white;\n  border: 1 px solid #333;\n  font-family: \"DotGothic16\", sans-serif;\n  font-size: 2em;\n  width: 20%;\n  &:hover {\n    transform: scale(1.05);\n    background-color: #ccc;\n    cursor: pointer;\n  }\n  @media only screen and (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Button = (props) => {\n  return <SButton onClick={props.onClick}>{props.children}</SButton>;\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Game from \"./Game\";\nimport Button from \"./Button\";\n\nconst GameIntro = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 30px;\n`;\nconst Score = styled.h3`\n  font-family: \"DotGothic16\", sans-serif;\n  font-size: 2em;\n`;\nconst GameMessage = styled.h2`\n  font-family: \"DotGothic16\", sans-serif;\n  font-size: 2em;\n  margin: 20px;\n`;\nconst MemoryCardGame = (props) => {\n  const [highScore, setHighScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const startGame = () => {\n    props.startGame();\n  };\n  const endGame = (score, gameMessage) => {\n    props.endGame();\n    enterNewScore(score);\n    setMessage(gameMessage);\n  };\n  const enterNewScore = (score) => {\n    if (score > highScore) {\n      setHighScore(score);\n    }\n  };\n  if (!props.isGamePlaying) {\n    return (\n      <GameIntro>\n        <GameMessage>{message}</GameMessage>\n        <Button onClick={props.startGame}>New Game</Button>\n        <Score>High Score: {highScore}</Score>\n      </GameIntro>\n    );\n  } else {\n    return (\n      <GameIntro>\n        <Game endGame={endGame} />\n      </GameIntro>\n    );\n  }\n};\n\nexport default MemoryCardGame;\n","import styled from \"styled-components\";\nimport \"./assets/reset.css\";\nimport \"./assets/fonts.css\";\nimport MemoryCardGame from \"./components/MemoryCardGame\";\nimport { useSpring, animated } from \"react-spring\";\nimport React, { useState } from \"react\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n`;\n\nconst Nav = styled(animated.nav)`\n  background-color: #ccc;\n  height: 50vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0px 0px 40px 40px;\n  text-align: center;\n`;\nconst Title = styled.h1`\n  font-family: \"DotGothic16\", sans-serif;\n  font-size: 4rem;\n  color: #444;\n  @media only screen and (max-width: 768px) {\n    font-size: 3rem;\n  }\n`;\nconst Credit = styled.h3`\n  font-family: \"DotGothic16\", sans-serif;\n  font-size: 2rem;\n  color: #999;\n  @media only screen and (max-width: 768px) {\n    font-size: 1.4rem;\n  }\n`;\n\nfunction App() {\n  const [isGamePlaying, setIsGamePlaying] = useState(false);\n  const startGame = () => {\n    setIsGamePlaying(true);\n  };\n  const endGame = () => {\n    setIsGamePlaying(false);\n  };\n  const props = useSpring({\n    height: !isGamePlaying ? \"50vh\" : \"30vh\",\n    from: { height: !isGamePlaying ? \"30vh\" : \"50vh\" },\n  });\n  return (\n    <AppWrapper>\n      <Nav style={props}>\n        <Title>Memory Card game</Title>\n        <Credit>By Maurizio Tonelli</Credit>\n      </Nav>\n      <MemoryCardGame\n        isGamePlaying={isGamePlaying}\n        startGame={startGame}\n        endGame={endGame}\n      />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}